name: AutoRefactor (CLI) PR

on:
  workflow_dispatch:
    inputs:
      project_file:
        description: "Path to Eclipse .project file (e.g., ./.project or ./eclipse/.project)"
        required: true
        default: ".project"
      exclude_refactorings:
        description: "Comma-separated list to EXCLUDE (optional)"
        required: false
        default: ""
      path_filter:
        description: "Only refactor files whose path contains this string (optional)"
        required: false
        default: ""
      path_re:
        description: "Java regex to select files (optional; defaults to '.*' if empty)"
        required: false
        default: ""
      source_dirs:
        description: "Repeatable source dirs (newline-separated)"
        required: false
        default: ""
      source_level:
        description: "Java source level (e.g., 8, 11, 17)"
        required: false
        default: "8"
      classpath_vars:
        description: "Classpath vars (newline-separated KEY=/abs/path)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  autorefactor:
    runs-on: ubuntu-latest
    env:
      AUTOREFACTOR_ECLIPSE: eclipse-oxygen-vanilla
      ECLIPSE_REPO: https://archive.eclipse.org/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz
      RELEASE_REPO: https://download.eclipse.org/releases/oxygen

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout AutoRefactorCli
        uses: actions/checkout@v4
        with:
          repository: cal101/AutoRefactorCli
          path: tools/AutoRefactorCli
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
          cache: maven

      - name: Download Eclipse Oxygen
        shell: bash
        run: |
          set -euo pipefail
          cd "$RUNNER_TEMP"
          curl -fL -o eclipse.tar.gz "$ECLIPSE_REPO"
          tar -xzf eclipse.tar.gz
          ECLIPSE_DIR="$(find . -maxdepth 1 -type d -name 'eclipse*' | head -n1)"
          [[ -x "$ECLIPSE_DIR/eclipse" ]]
          sudo ln -sf "$PWD/$ECLIPSE_DIR/eclipse" "/usr/local/bin/${AUTOREFACTOR_ECLIPSE}"
          which "${AUTOREFACTOR_ECLIPSE}"

      - name: Install Equinox Console + Felix Gogo (p2 director)
        shell: bash
        run: |
          set -euo pipefail
          "${AUTOREFACTOR_ECLIPSE}" -nosplash \
            -application org.eclipse.equinox.p2.director \
            -repository "$RELEASE_REPO" \
            -installIU org.eclipse.equinox.console,org.apache.felix.gogo.command,org.apache.felix.gogo.shell || true

      - name: Patch versions (align to 1.2.0)
        working-directory: tools/AutoRefactorCli
        shell: bash
        run: |
          sed -i 's|<version>2\.0\.0-SNAPSHOT</version>|<version>1.2.0-SNAPSHOT</version>|g' cli/pom.xml
          sed -i 's|^Bundle-Version:\s*2\.0\.0\.qualifier$|Bundle-Version: 1.2.0.qualifier|g' cli/META-INF/MANIFEST.MF
          sed -i 's|org\.autorefactor\.plugin-2\.0\.0-SNAPSHOT\.jar|org.autorefactor.plugin-1.2.0-SNAPSHOT.jar|g' build-cli
          sed -i 's|org\.autorefactor\.cli-2\.0\.0-SNAPSHOT\.jar|org.autorefactor.cli-1.2.0-SNAPSHOT.jar|g' build-cli
          chmod +x ./build-cli

      - name: Build AutoRefactorCli
        working-directory: tools/AutoRefactorCli
        run: ./build-cli

      - name: Collect all refactorings (full log on failure)
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          dump_logs() {
            echo "::group::Eclipse/AutoRefactor logs"
            shopt -s nullglob
            for f in /tmp/workspace*/configuration/*.log; do
              echo "----- $f -----"
              cat "$f" || true
            done
            echo "::endgroup::"
          }
          BIN="tools/AutoRefactorCli/cli/target/autorefactor/bin/autorefactor"
          if ! OUT="$("$BIN" --consolelog list)"; then
            echo "Error: 'autorefactor list' failed."
            dump_logs
            exit 1
          fi
          mapfile -t NAMES < <(printf '%s\n' "$OUT" | awk -F' - ' '/Refactoring/ {gsub(/^[[:space:]]+/, "", $1); print $1}')
          if [[ ${#NAMES[@]} -eq 0 ]]; then
            echo "Error: No refactoring names parsed from 'autorefactor list'."
            dump_logs
            exit 1
          fi
          REFS=$(IFS=, ; echo "${NAMES[*]}")
          echo "refactorings=$REFS" >> "$GITHUB_OUTPUT"
          printf '%s' "$REFS" > /tmp/all_refactorings.txt

      - name: Prepare arguments
        id: args
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_FILE="${{ inputs.project_file }}"
          EXCLUDE="${{ inputs.exclude_refactorings }}"
          PATH_FILTER="${{ inputs.path_filter }}"
          PATH_RE="${{ inputs.path_re }}"
          SOURCE_DIRS_RAW="${{ inputs.source_dirs }}"
          SOURCE_LEVEL="${{ inputs.source_level }}"
          CLASSPATH_VARS_RAW="${{ inputs.classpath_vars }}"
          REFACTORINGS="$(cat /tmp/all_refactorings.txt)"
          [[ -f "$PROJECT_FILE" ]]

          declare -a ARGS
          ARGS+=(apply --project "$PROJECT_FILE" --refactorings "$REFACTORINGS")
          [[ -n "$EXCLUDE" ]] && ARGS+=(--exclude-refactorings "$EXCLUDE")
          [[ -n "$PATH_FILTER" ]] && ARGS+=(--path-filter "$PATH_FILTER")
          [[ -n "$PATH_RE" ]] && ARGS+=(--path-re "$PATH_RE")
          [[ -n "$SOURCE_LEVEL" ]] && ARGS+=(--source-level "$SOURCE_LEVEL")

          if [[ -n "$SOURCE_DIRS_RAW" ]]; then
            while IFS= read -r line; do [[ -n "$line" ]] && ARGS+=(--source "$line"); done <<< "$SOURCE_DIRS_RAW"
          fi
          if [[ -n "$CLASSPATH_VARS_RAW" ]]; then
            while IFS= read -r kv; do [[ -n "$kv" ]] && ARGS+=(--classpath-variable "$kv"); done <<< "$CLASSPATH_VARS_RAW"
          fi

          printf '%s\0' "${ARGS[@]}" > /tmp/autorefactor.args
          echo "rendered=$(printf '%q ' autorefactor --consolelog "${ARGS[@]}")" >> "$GITHUB_OUTPUT"

      - name: Apply refactorings (full log on failure)
        id: apply
        shell: bash
        run: |
          set -euo pipefail
          dump_logs() {
            echo "::group::Eclipse/AutoRefactor logs"
            shopt -s nullglob
            for f in /tmp/workspace*/configuration/*.log; do
              echo "----- $f -----"
              cat "$f" || true
            done
            echo "::endgroup::"
          }
          mapfile -d '' ARGS < /tmp/autorefactor.args
          BIN="tools/AutoRefactorCli/cli/target/autorefactor/bin/autorefactor"
          if ! "$BIN" --consolelog "${ARGS[@]}"; then
            echo "Error: 'autorefactor apply' failed."
            dump_logs
            exit 1
          fi

      - name: Check for changes
        id: gitdiff
        run: |
          git update-index -q --refresh
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create PR with changes
        if: steps.apply.outcome == 'success' && steps.gitdiff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(refactor): apply AutoRefactorCli (ALL refactorings)
          title: "Apply AutoRefactorCli (ALL)"
          body: |
            Built AutoRefactorCli with JDK 8 and Eclipse Oxygen. Applied all available refactorings.
          branch: "autorefactor/cli-all-${{ github.run_id }}"
          delete-branch: true
          add-paths: |
            **/*
