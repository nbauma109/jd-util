name: AutoRefactor (CLI) PR

on:
  workflow_dispatch:
    inputs:
      project_file:
        description: "Path to Eclipse .project file (e.g., ./.project)"
        required: true
        default: ".project"
      exclude_refactorings:
        description: "Comma-separated list to EXCLUDE (optional)"
        required: false
        default: ""
      path_filter:
        description: "Only refactor files whose path contains this (optional)"
        required: false
        default: ""
      path_re:
        description: "Java regex to select files (optional; defaults to '.*')"
        required: false
        default: ""
      source_dirs:
        description: "Repeatable source dirs (newline-separated)"
        required: false
        default: ""
      source_level:
        description: "Java source level"
        required: false
        default: "8"
      classpath_vars:
        description: "Classpath vars (newline-separated KEY=/abs/path)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  autorefactor:
    runs-on: ubuntu-latest
    env:
      ECLIPSE_TAR: https://archive.eclipse.org/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz
      OXYGEN_REPO: https://download.eclipse.org/releases/oxygen
      ECLIPSE_CMD: eclipse-oxygen-vanilla
      TIMEOUT_LIST: "180"
      TIMEOUT_APPLY: "900"
      SWT_GTK3: "0"   # prefer GTK2 to avoid SWT quirks on CI

    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout AutoRefactorCli (fork with version fix)
        uses: actions/checkout@v4
        with:
          repository: nbauma109/AutoRefactorCli
          path: tools/AutoRefactorCli
          fetch-depth: 0

      - name: Set up JDK 8 (build & runtime)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
          cache: maven

      - name: Install Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Download Eclipse Oxygen
        id: dl
        shell: bash
        run: |
          set -euo pipefail
          cd "$RUNNER_TEMP"
          curl -fL -o eclipse.tar.gz "$ECLIPSE_TAR"
          tar -xzf eclipse.tar.gz
          ECLIPSE_DIR="$(find "$PWD" -maxdepth 1 -type d -name 'eclipse*' | head -n1)"
          [[ -x "$ECLIPSE_DIR/eclipse" ]]
          echo "home=$ECLIPSE_DIR" >> "$GITHUB_OUTPUT"
          sudo ln -sf "$ECLIPSE_DIR/eclipse" "/usr/local/bin/${ECLIPSE_CMD}"
          which "${ECLIPSE_CMD}"

      - name: Build AutoRefactorCli (Tycho reactor)
        working-directory: tools/AutoRefactorCli
        run: |
          set -euo pipefail
          chmod +x ./build-cli
          ./build-cli
          echo "Built reactor; listing repository/target/repository:"
          ls -la repository/target/repository || true

      - name: Install AutoRefactor feature into Eclipse via p2 director
        id: p2
        shell: bash
        run: |
          set -euo pipefail
          ECLIPSE_BIN="${{ env.ECLIPSE_CMD }}"
          ECLIPSE_HOME="${{ steps.dl.outputs.home }}"
          LOCAL_REPO="$(cd tools/AutoRefactorCli/repository/target/repository && pwd)"
          WS="/home/runner/work/_temp/eclipse-ws-$(head -c6 /dev/urandom | tr -dc 'a-z0-9')"

          echo "Installing from:"
          echo "  local: $LOCAL_REPO"
          echo "  oxy:   ${{ env.OXYGEN_REPO }}"
          echo "Destination Eclipse: $ECLIPSE_HOME"

          # Do a clean director run installing ONLY the feature group.
          # We do NOT attempt to install the 'org.autorefactor.cli' IU by id;
          # the feature pulls all needed bundles (plugin, plugin.ui, cli).
          set +e
          timeout 240s xvfb-run -a "$ECLIPSE_BIN" -nosplash -consoleLog \
            -application org.eclipse.equinox.p2.director \
            -repository "file:$LOCAL_REPO,${{ env.OXYGEN_REPO }}" \
            -installIU org.autorefactor.feature.feature.group \
            -destination "$ECLIPSE_HOME" \
            -profile SDKProfile \
            -profileProperties org.eclipse.update.install.features=true \
            -roaming > /tmp/_p2.out 2>&1
          status=$?
          set -e

          if [[ $status -ne 0 ]]; then
            echo "Error: P2 installation failed (status=$status)."
            echo "::group::p2 stdout/stderr"; cat /tmp/_p2.out || true; echo "::endgroup::"
            echo "::group::Eclipse config logs (destination)"
            shopt -s nullglob
            for f in "$ECLIPSE_HOME"/configuration/*.log; do
              echo "----- $f -----"; cat "$f" || true
            done
            echo "::endgroup::"
            exit 1
          fi

          echo "::group::p2 stdout/stderr"; cat /tmp/_p2.out || true; echo "::endgroup::"

          # Verify bundles are now registered in bundles.info
          BUNDLES_INFO="$ECLIPSE_HOME/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
          if [[ ! -f "$BUNDLES_INFO" ]]; then
            echo "bundles.info not found at $BUNDLES_INFO"
            exit 1
          fi
          echo "::group::bundles.info (grep autorefactor)"
          grep -i "org.autorefactor" "$BUNDLES_INFO" || true
          echo "::endgroup::"

          # Must see three entries
          HAVE=$(grep -ci "org.autorefactor" "$BUNDLES_INFO" || true)
          if [[ "$HAVE" -lt 3 ]]; then
            echo "AutoRefactor bundles not registered (found $HAVE entries)."
            cat "$BUNDLES_INFO" | sed -n '1,200p'
            exit 1
          fi

      - name: Collect all refactorings (run Eclipse application; full logs)
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          ECLIPSE="${{ env.ECLIPSE_CMD }}"
          ECLIPSE_HOME="${{ steps.dl.outputs.home }}"
          WS="/tmp/workspace-$(head -c6 /dev/urandom | tr -dc 'a-z0-9')"

          dump_logs() {
            echo "::group::Eclipse logs"
            shopt -s nullglob
            for f in "$WS"/configuration/*.log "$ECLIPSE_HOME"/configuration/*.log; do
              [[ -f "$f" ]] || continue
              echo "----- $f -----"; cat "$f" || true
            done
            echo "::endgroup::"
          }

          echo "Starting 'list' (timeout=${TIMEOUT_LIST}s)"
          set +e
          timeout "${TIMEOUT_LIST}"s xvfb-run -a "${ECLIPSE}" -nosplash -consoleLog \
            -data "$WS" \
            -configuration "$WS/configuration" \
            -application org.autorefactor.cli.AutoRefactor \
            -product org.eclipse.platform.ide \
            --consolelog list \
            -vmargs -Xmx2000m > /tmp/_list.out 2>&1
          status=$?
          set -e

          if [[ $status -ne 0 ]]; then
            echo "Error: 'list' failed or timed out (status=$status)."
            echo "::group::'list' stdout/stderr"; cat /tmp/_list.out || true; echo "::endgroup::"
            dump_logs
            exit 1
          fi

          OUT="$(cat /tmp/_list.out)"
          mapfile -t NAMES < <(printf '%s\n' "$OUT" | awk -F' - ' '/Refactoring/ {sub(/^[[:space:]]+/, "", $1); print $1}')
          if [[ ${#NAMES[@]} -eq 0 ]]; then
            echo "Error: No refactoring names parsed from 'list'."
            echo "::group::'list' stdout/stderr"; cat /tmp/_list.out || true; echo "::endgroup::"
            dump_logs
            exit 1
          fi

          REFS=$(IFS=, ; echo "${NAMES[*]}")
          echo "refactorings=$REFS" >> "$GITHUB_OUTPUT"
          echo "workspace=$WS" >> "$GITHUB_OUTPUT"
          printf '%s' "$REFS" > /tmp/all_refactorings.txt

      - name: Prepare arguments
        id: args
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_FILE="${{ inputs.project_file }}"
          EXCLUDE="${{ inputs.exclude_refactorings }}"
          PATH_FILTER="${{ inputs.path_filter }}"
          PATH_RE="${{ inputs.path_re }}"
          SOURCE_DIRS_RAW="${{ inputs.source_dirs }}"
          SOURCE_LEVEL="${{ inputs.source_level }}"
          CLASSPATH_VARS_RAW="${{ inputs.classpath_vars }}"
          REFACTORINGS="$(cat /tmp/all_refactorings.txt)"
          [[ -f "$PROJECT_FILE" ]]

          declare -a ARGS
          ARGS+=(apply --project "$PROJECT_FILE" --refactorings "$REFACTORINGS")
          [[ -n "$EXCLUDE" ]] && ARGS+=(--exclude-refactorings "$EXCLUDE")
          [[ -n "$PATH_FILTER" ]] && ARGS+=(--path-filter "$PATH_FILTER")
          [[ -n "$PATH_RE" ]] && ARGS+=(--path-re "$PATH_RE")
          [[ -n "$SOURCE_LEVEL" ]] && ARGS+=(--source-level "$SOURCE_LEVEL")
          if [[ -n "$SOURCE_DIRS_RAW" ]]; then
            while IFS= read -r line; do [[ -n "$line" ]] && ARGS+=(--source "$line"); done <<< "$SOURCE_DIRS_RAW"
          fi
          if [[ -n "$CLASSPATH_VARS_RAW" ]]; then
            while IFS= read -r kv; do [[ -n "$kv" ]] && ARGS+=(--classpath-variable "$kv"); done <<< "$CLASSPATH_VARS_RAW"
          fi
          printf '%s\0' "${ARGS[@]}" > /tmp/autorefactor.args
          echo "workspace=${{ steps.collect.outputs.workspace }}" >> "$GITHUB_OUTPUT"

      - name: Apply refactorings (run Eclipse application; full logs)
        id: apply
        shell: bash
        run: |
          set -euo pipefail
          ECLIPSE="${{ env.ECLIPSE_CMD }}"
          WS="${{ steps.args.outputs.workspace }}"

          dump_logs() {
            echo "::group::Eclipse logs"
            shopt -s nullglob
            for f in "$WS"/configuration/*.log; do
              [[ -f "$f" ]] || continue
              echo "----- $f -----"; cat "$f" || true
            done
            echo "::endgroup::"
          }

          mapfile -d '' ARGS < /tmp/autorefactor.args

          echo "Starting 'apply' (timeout=${TIMEOUT_APPLY}s)"
          set +e
          timeout "${TIMEOUT_APPLY}"s xvfb-run -a "${ECLIPSE}" -nosplash -consoleLog \
            -data "$WS" \
            -configuration "$WS/configuration" \
            -application org.autorefactor.cli.AutoRefactor \
            -product org.eclipse.platform.ide \
            --consolelog "${ARGS[@]}" \
            -vmargs -Xmx2000m > /tmp/_apply.out 2>&1
          status=$?
          set -e

          if [[ $status -ne 0 ]]; then
            echo "Error: 'apply' failed or timed out (status=$status)."
            echo "::group::'apply' stdout/stderr"; cat /tmp/_apply.out || true; echo "::endgroup::"
            dump_logs
            exit 1
          fi

      - name: Check for changes
        id: gitdiff
        run: |
          git update-index -q --refresh
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create PR with changes
        if: steps.apply.outcome == 'success' && steps.gitdiff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(refactor): apply AutoRefactorCli (ALL refactorings)
          title: "Apply AutoRefactorCli (ALL)"
          body: |
            Built AutoRefactorCli (1.2.0) and installed it into Eclipse Oxygen via p2 director (no dropins at runtime). Verified registration in bundles.info, then ran the CLI application headlessly to list and apply all refactorings. Full logs printed on failure; PR only when apply succeeds and changes exist.
          branch: "autorefactor/cli-all-${{ github.run_id }}"
          delete-branch: true
          add-paths: |
            **/*
