name: AutoRefactor (CLI) PR

on:
  workflow_dispatch:
    inputs:
      project_file:
        description: "Path to Eclipse .project file (e.g., ./.project)"
        required: true
        default: ".project"
      exclude_refactorings:
        description: "Comma-separated list to EXCLUDE (optional)"
        required: false
        default: ""
      path_filter:
        description: "Only refactor files whose path contains this (optional)"
        required: false
        default: ""
      path_re:
        description: "Java regex to select files (optional; defaults to '.*')"
        required: false
        default: ""
      source_dirs:
        description: "Repeatable source dirs (newline-separated)"
        required: false
        default: ""
      source_level:
        description: "Java source level"
        required: false
        default: "8"
      classpath_vars:
        description: "Classpath vars (newline-separated KEY=/abs/path)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  autorefactor:
    runs-on: ubuntu-latest
    env:
      ECLIPSE_TAR: https://archive.eclipse.org/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz
      ECLIPSE_CMD: eclipse-oxygen-vanilla
      TIMEOUT_LIST: "180"
      TIMEOUT_APPLY: "900"
      SWT_GTK3: "0"  # prefer GTK2 on CI

    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout AutoRefactorCli (your fork with version fix)
        uses: actions/checkout@v4
        with:
          repository: nbauma109/AutoRefactorCli
          path: tools/AutoRefactorCli
          fetch-depth: 0

      - name: Set up JDK 8 (build & runtime)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
          cache: maven

      - name: Install Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Download Eclipse Oxygen
        id: dl
        shell: bash
        run: |
          set -euo pipefail
          cd "$RUNNER_TEMP"
          curl -fL -o eclipse.tar.gz "$ECLIPSE_TAR"
          tar -xzf eclipse.tar.gz
          ECLIPSE_DIR="$(find "$PWD" -maxdepth 1 -type d -name 'eclipse*' | head -n1)"
          [[ -x "$ECLIPSE_DIR/eclipse" ]]
          echo "home=$ECLIPSE_DIR" >> "$GITHUB_OUTPUT"
          sudo ln -sf "$ECLIPSE_DIR/eclipse" "/usr/local/bin/${ECLIPSE_CMD}"
          which "${ECLIPSE_CMD}"

      - name: Build AutoRefactorCli (Tycho reactor)
        working-directory: tools/AutoRefactorCli
        run: |
          set -euo pipefail
          chmod +x ./build-cli
          ./build-cli

      - name: Ensure plugin.ui is present in dropins/plugins
        working-directory: tools/AutoRefactorCli
        shell: bash
        run: |
          set -euo pipefail
          UI_JAR="plugin.ui/target/org.autorefactor.plugin.ui-1.2.0-SNAPSHOT.jar"
          DEST="cli/target/autorefactor/dropins/plugins"
          mkdir -p "$DEST"
          if [[ ! -f "$UI_JAR" ]]; then
            echo "plugin.ui jar missing, listing target:"; ls -la plugin.ui/target || true
            exit 1
          fi
          cp -f "$UI_JAR" "$DEST"/
          echo "Dropins content:"; ls -la "$DEST"

      - name: Collect all refactorings (direct Eclipse; full logs on failure)
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          ECLIPSE="${{ env.ECLIPSE_CMD }}"
          DROPINS="$(cd tools/AutoRefactorCli/cli/target/autorefactor/dropins && pwd)"
          WS="/tmp/workspace-$(head -c6 /dev/urandom | tr -dc 'a-z0-9')"

          dump_logs() {
            echo "::group::Eclipse logs"
            shopt -s nullglob
            for f in "$WS"/configuration/*.log /tmp/workspace*/configuration/*.log; do
              [[ -f "$f" ]] || continue
              echo "----- $f -----"; cat "$f" || true
            done
            echo "::endgroup::"
          }

          echo "Starting 'list' (timeout=${TIMEOUT_LIST}s)"
          set +e
          timeout "${TIMEOUT_LIST}"s xvfb-run -a "${ECLIPSE}" -nosplash -consoleLog -clean \
            -data "$WS" \
            -configuration "$WS/configuration" \
            -application org.autorefactor.cli.AutoRefactor \
            --consolelog list \
            -vmargs -Xmx2000m \
            -Dorg.eclipse.equinox.p2.reconciler.dropins=true \
            -Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false \
            -Dorg.eclipse.equinox.p2.reconciler.dropins.directory="$DROPINS" > /tmp/_list.out 2>&1
          status=$?
          set -e

          if [[ $status -ne 0 ]]; then
            echo "Error: 'list' failed or timed out (status=$status)."
            echo "::group::'list' stdout/stderr"; cat /tmp/_list.out || true; echo "::endgroup::"
            dump_logs
            pkill -9 -f 'org.eclipse.equinox.launcher' || true
            pkill -9 -f 'Xvfb' || true
            exit 1
          fi

          OUT="$(cat /tmp/_list.out)"
          mapfile -t NAMES < <(printf '%s\n' "$OUT" | awk -F' - ' '/Refactoring/ {sub(/^[[:space:]]+/, "", $1); print $1}')
          if [[ ${#NAMES[@]} -eq 0 ]]; then
            echo "Error: No refactoring names parsed from 'list'."
            echo "::group::'list' stdout/stderr"; cat /tmp/_list.out || true; echo "::endgroup::"
            dump_logs
            exit 1
          fi

          REFS=$(IFS=, ; echo "${NAMES[*]}")
          echo "refactorings=$REFS" >> "$GITHUB_OUTPUT"
          echo "workspace=$WS" >> "$GITHUB_OUTPUT"
          printf '%s' "$REFS" > /tmp/all_refactorings.txt

      - name: Prepare arguments
        id: args
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_FILE="${{ inputs.project_file }}"
          EXCLUDE="${{ inputs.exclude_refactorings }}"
          PATH_FILTER="${{ inputs.path_filter }}"
          PATH_RE="${{ inputs.path_re }}"
          SOURCE_DIRS_RAW="${{ inputs.source_dirs }}"
          SOURCE_LEVEL="${{_
