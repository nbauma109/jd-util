#!/usr/bin/env python3
import os, json, pathlib, requests, re, sys

OLLAMA_URL = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
MODEL = os.environ.get("LLM_MODEL", "llama3.2:3b")

diff_path = pathlib.Path(".llm_patch.diff")
if not diff_path.exists() or diff_path.stat().st_size == 0:
    sys.exit(0)

diff_text = diff_path.read_text(encoding="utf-8", errors="ignore")

SYSTEM = (
    "You are generating metadata for a code-change pull request. "
    "Output STRICT JSON only (no markdown, no backticks)."
)

USER = f"""
You are given a unified diff of code changes that will be proposed in a pull request.

Requirements:
- Produce a PR title (<=72 chars), a commit_message (<=72 chars subject line + optional body),
  and a PR body (2â€“8 short bullets or short paragraphs).
- Title should be imperative (e.g., "Add", "Fix", "Refactor").
- Commit message may include a short body after a blank line if helpful.
- Be specific and accurate to the diff.

Return JSON like:
{{
  "title": "...",
  "commit_message": "...",
  "body": "..."
}}

Here is the DIFF:
{diff_text}
"""

payload = {
    "model": MODEL,
    "system": SYSTEM,
    "prompt": USER,
    "options": {"temperature": 0.2}
}

with requests.post(f"{OLLAMA_URL}/api/generate", json=payload, stream=True, timeout=600) as r:
    r.raise_for_status()
    chunks = []
    for line in r.iter_lines():
        if not line:
            continue
        obj = json.loads(line.decode("utf-8"))
        if "response" in obj:
            chunks.append(obj["response"])
        if obj.get("done"):
            break

raw = "".join(chunks).strip()

def extract_json(s: str):
    start_positions = [m.start() for m in re.finditer(r'\{', s)]
    for start in start_positions:
        for end in range(len(s)-1, start, -1):
            chunk = s[start:end+1]
            try:
                return json.loads(chunk)
            except Exception:
                continue
    return None

try:
    data = json.loads(raw)
except Exception:
    data = extract_json(raw)

if not isinstance(data, dict):
    data = {
        "title": "LLM suggestions",
        "commit_message": "chore(llm): apply local LLM suggestions",
        "body": "Automated suggestions generated by a fully local LLM."
    }

pathlib.Path(".llm_meta.json").write_text(
    json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8"
)
