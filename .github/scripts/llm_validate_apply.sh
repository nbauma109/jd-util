#!/usr/bin/env bash
set -Eeuo pipefail
trap 'echo "[ERROR] line $LINENO: $BASH_COMMAND" >&2' ERR

LLM_MODEL="${LLM_MODEL:-qwen2.5-coder:3b}"
BASE_BRANCH="${BASE_BRANCH:-main}"

: "${GITHUB_OUTPUT:=${GITHUB_OUTPUT:-/tmp/github_output}}"
touch "$GITHUB_OUTPUT"

echo "----- RAW MODEL OUTPUT (first 80 lines) -----"
nl -ba .llm_raw.txt | sed -n '1,80p'
echo "---------------------------------------------"

if grep -qx 'NO_CHANGES' .llm_raw.txt; then
  echo "no_changes=true" >> "$GITHUB_OUTPUT"
  echo "[validator] Model replied NO_CHANGES"
  exit 0
fi

# Try to detect format: unified diff ('--- a/...') or 'diff --git'
if grep -qE '^---\s+a/' .llm_raw.txt; then
  echo "[validator] Detected unified diff format"
  cp .llm_raw.txt .llm_patch.diff
  # normalize newlines just in case
  sed -i 's/\r$//' .llm_patch.diff

  echo "[validator] Dry-run patch -p0"
  if ! patch -p0 --dry-run < .llm_patch.diff ; then
    echo "[validator] patch -p0 failed; will try git apply as fallback"
    if ! git apply --check .llm_patch.diff ; then
      echo "no_changes=true" >> "$GITHUB_OUTPUT"
      echo "[validator] Could not apply patch; skipping."
      exit 0
    fi
  fi

  echo "[validator] Applying patch"
  if ! patch -p0 < .llm_patch.diff ; then
    echo "[validator] Fallback: git apply"
    git apply .llm_patch.diff
  fi

elif grep -qE '^diff --git a/.+ b/.+' .llm_raw.txt; then
  echo "[validator] Detected 'diff --git' format"
  cp .llm_raw.txt .llm_patch.diff
  sed -i 's/\r$//' .llm_patch.diff

  echo "[validator] git apply --check"
  if ! git apply --check .llm_patch.diff ; then
    echo "no_changes=true" >> "$GITHUB_OUTPUT"
    echo "[validator] git apply check failed; skipping."
    exit 0
  fi

  echo "[validator] git apply"
  git apply .llm_patch.diff

else
  echo "no_changes=true" >> "$GITHUB_OUTPUT"
  echo "[validator] No recognizable diff header; skipping."
  exit 0
fi

SHORTSHA=$(git rev-parse --short HEAD)
DATESTR=$(date -u +%Y%m%d-%H%M%S)
BOT_BRANCH="llm/suggest-${DATESTR}-${SHORTSHA}"

git checkout -b "${BOT_BRANCH}"
git add -A
if git diff --cached --quiet; then
  echo "no_changes=true" >> "$GITHUB_OUTPUT"
  echo "[validator] Nothing staged after apply; skipping."
  exit 0
fi

# Generate metadata (title, commit message, body)
python .github/scripts/llm_metadata.py || true

PR_TITLE="LLM suggestions: ${BASE_BRANCH}"
COMMIT_MESSAGE="chore(llm): apply local LLM suggestions"
PR_BODY="Automated suggestions generated by a fully local LLM (\`${LLM_MODEL}\`)."

if [[ -f ".llm_meta.json" ]] && jq -e . >/dev/null 2>&1 < .llm_meta.json; then
  PT="$(jq -r '.title // empty' .llm_meta.json)"; [[ -n "$PT" ]] && PR_TITLE="$PT"
  CM="$(jq -r '.commit_message // empty' .llm_meta.json)"; [[ -n "$CM" ]] && COMMIT_MESSAGE="$CM"
  PB="$(jq -r '.body // empty' .llm_meta.json)"; [[ -n "$PB" ]] && PR_BODY="$PB"
fi

git -c user.name="github-actions[bot]" \
    -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
    commit -m "${COMMIT_MESSAGE}"
git push -u origin "${BOT_BRANCH}"

{
  echo "$PR_BODY"
  echo
  echo "<details><summary>Patch</summary>"
  echo
  echo '```diff'
  sed -n '1,400p' .llm_patch.diff
  echo '```'
  echo "</details>"
} > .llm_body.md

gh pr create \
  --title "${PR_TITLE}" \
  --body-file .llm_body.md \
  --base "${BASE_BRANCH}" \
  --head "${BOT_BRANCH}"

echo "no_changes=false" >> "$GITHUB_OUTPUT"
